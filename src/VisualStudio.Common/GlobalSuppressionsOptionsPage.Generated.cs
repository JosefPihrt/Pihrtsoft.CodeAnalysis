// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.Collections.Generic;
using Roslynator.CSharp;

namespace Roslynator.VisualStudio
{
    public partial class GlobalSuppressionsOptionsPage
    {
        protected override string MaxId
        {
            get;
        }

        = DiagnosticIdentifiers.DuplicateEnumValue;
        protected override void Fill(ICollection<BaseModel> analyzers)
        {
            analyzers.Clear();
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddBracesWhenExpressionSpansOverMultipleLines, "Add braces (when expression spans over multiple lines).", !IsEnabled(DiagnosticIdentifiers.AddBracesWhenExpressionSpansOverMultipleLines)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveBraces, "Remove braces.", !IsEnabled(DiagnosticIdentifiers.RemoveBraces)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddBracesToIfElseWhenExpressionSpansOverMultipleLines, "Add braces to if-else (when expression spans over multiple lines).", !IsEnabled(DiagnosticIdentifiers.AddBracesToIfElseWhenExpressionSpansOverMultipleLines)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveBracesFromIfElse, "Remove braces from if-else.", !IsEnabled(DiagnosticIdentifiers.RemoveBracesFromIfElse)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyNestedUsingStatement, "Simplify nested using statement.", !IsEnabled(DiagnosticIdentifiers.SimplifyNestedUsingStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MergeElseClauseWithNestedIfStatement, "Merge else clause with nested if statement.", !IsEnabled(DiagnosticIdentifiers.MergeElseClauseWithNestedIfStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddBraces, "Add braces.", !IsEnabled(DiagnosticIdentifiers.AddBraces)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsNotObvious, "Use explicit type instead of 'var' (when the type is not obvious).", !IsEnabled(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsNotObvious)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarInForEach, "Use explicit type instead of 'var' (foreach variable).", !IsEnabled(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarInForEach)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsObvious, "Use 'var' instead of explicit type (when the type is obvious).", !IsEnabled(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsObvious)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsObvious, "Use explicit type instead of 'var' (when the type is obvious).", !IsEnabled(DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsObvious)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UsePredefinedType, "Use predefined type.", !IsEnabled(DiagnosticIdentifiers.UsePredefinedType)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidImplicitlyTypedArray, "Avoid implicitly-typed array.", !IsEnabled(DiagnosticIdentifiers.AvoidImplicitlyTypedArray)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseNameOfOperator, "Use nameof operator.", !IsEnabled(DiagnosticIdentifiers.UseNameOfOperator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseExpressionBodiedMember, "Use expression-bodied member.", !IsEnabled(DiagnosticIdentifiers.UseExpressionBodiedMember)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidMultilineExpressionBody, "Avoid multiline expression body.", !IsEnabled(DiagnosticIdentifiers.AvoidMultilineExpressionBody)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddDefaultAccessModifier, "Add default access modifier.", !IsEnabled(DiagnosticIdentifiers.AddDefaultAccessModifier)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OrderModifiers, "Order modifiers.", !IsEnabled(DiagnosticIdentifiers.OrderModifiers)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyNullableOfT, "Simplify Nullable<T> to T?.", !IsEnabled(DiagnosticIdentifiers.SimplifyNullableOfT)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyLambdaExpression, "Simplify lambda expression.", !IsEnabled(DiagnosticIdentifiers.SimplifyLambdaExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatEmptyBlock, "Format empty block.", !IsEnabled(DiagnosticIdentifiers.FormatEmptyBlock)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatAccessorList, "Format accessor list.", !IsEnabled(DiagnosticIdentifiers.FormatAccessorList)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddNewLineBeforeEnumMember, "Add new line before enum member.", !IsEnabled(DiagnosticIdentifiers.AddNewLineBeforeEnumMember)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddNewLineBeforeStatement, "Add new line before statement.", !IsEnabled(DiagnosticIdentifiers.AddNewLineBeforeStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, "Add new line before embedded statement.", !IsEnabled(DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, "Add new line after switch label.", !IsEnabled(DiagnosticIdentifiers.AddNewLineAfterSwitchLabel)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatBinaryOperatorOnNextLine, "Format binary operator on next line.", !IsEnabled(DiagnosticIdentifiers.FormatBinaryOperatorOnNextLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, "Add empty line after embedded statement.", !IsEnabled(DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantParentheses, "Remove redundant parentheses.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantParentheses)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantBooleanLiteral, "Remove redundant boolean literal.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantBooleanLiteral)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantSealedModifier, "Remove redundant 'sealed' modifier.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantSealedModifier)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantCommaInInitializer, "Remove redundant comma in initializer.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantCommaInInitializer)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantEmptyLine, "Remove redundant empty line.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantEmptyLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveTrailingWhitespace, "Remove trailing white-space.", !IsEnabled(DiagnosticIdentifiers.RemoveTrailingWhitespace)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyStatement, "Remove empty statement.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveArgumentListFromAttribute, "Remove argument list from attribute.", !IsEnabled(DiagnosticIdentifiers.RemoveArgumentListFromAttribute)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyElseClause, "Remove empty else clause.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyElseClause)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyInitializer, "Remove empty initializer.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyInitializer)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEnumDefaultUnderlyingType, "Remove enum default underlying type.", !IsEnabled(DiagnosticIdentifiers.RemoveEnumDefaultUnderlyingType)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemovePartialModifierFromTypeWithSinglePart, "Remove 'partial' modifier from type with a single part.", !IsEnabled(DiagnosticIdentifiers.RemovePartialModifierFromTypeWithSinglePart)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveOriginalExceptionFromThrowStatement, "Remove original exception from throw statement.", !IsEnabled(DiagnosticIdentifiers.RemoveOriginalExceptionFromThrowStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RenamePrivateFieldAccordingToCamelCaseWithUnderscore, "Rename private field according to camel case with underscore.", !IsEnabled(DiagnosticIdentifiers.RenamePrivateFieldAccordingToCamelCaseWithUnderscore)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AsynchronousMethodNameShouldEndWithAsync, "Asynchronous method name should end with 'Async'.", !IsEnabled(DiagnosticIdentifiers.AsynchronousMethodNameShouldEndWithAsync)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.NonAsynchronousMethodNameShouldNotEndWithAsync, "Non-asynchronous method name should not end with 'Async'.", !IsEnabled(DiagnosticIdentifiers.NonAsynchronousMethodNameShouldNotEndWithAsync)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, "Use lambda expression instead of anonymous method.", !IsEnabled(DiagnosticIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyBooleanComparison, "Simplify boolean comparison.", !IsEnabled(DiagnosticIdentifiers.SimplifyBooleanComparison)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddArgumentListToObjectCreation, "Add argument list to object creation expression.", !IsEnabled(DiagnosticIdentifiers.AddArgumentListToObjectCreation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ParenthesizeConditionInConditionalExpression, "Parenthesize condition in conditional expression.", !IsEnabled(DiagnosticIdentifiers.ParenthesizeConditionInConditionalExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareEachAttributeSeparately, "Declare each attribute separately.", !IsEnabled(DiagnosticIdentifiers.DeclareEachAttributeSeparately)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidSemicolonAtEndOfDeclaration, "Avoid semicolon at the end of declaration.", !IsEnabled(DiagnosticIdentifiers.AvoidSemicolonAtEndOfDeclaration)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidUsageOfUsingAliasDirective, "Avoid usage of using alias directive.", !IsEnabled(DiagnosticIdentifiers.AvoidUsageOfUsingAliasDirective)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, "Add empty line between declarations.", !IsEnabled(DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCompoundAssignment, "Use compound assignment.", !IsEnabled(DiagnosticIdentifiers.UseCompoundAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidLockingOnPubliclyAccessibleInstance, "Avoid locking on publicly accessible instance.", !IsEnabled(DiagnosticIdentifiers.AvoidLockingOnPubliclyAccessibleInstance)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareEachTypeInSeparateFile, "Declare each type in separate file.", !IsEnabled(DiagnosticIdentifiers.DeclareEachTypeInSeparateFile)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MergeIfStatementWithNestedIfStatement, "Merge if statement with nested if statement.", !IsEnabled(DiagnosticIdentifiers.MergeIfStatementWithNestedIfStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidInterpolatedStringWithNoInterpolation, "Avoid interpolated string with no interpolation.", !IsEnabled(DiagnosticIdentifiers.AvoidInterpolatedStringWithNoInterpolation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidUsageOfDoStatementToCreateInfiniteLoop, "Avoid usage of do statement to create an infinite loop.", !IsEnabled(DiagnosticIdentifiers.AvoidUsageOfDoStatementToCreateInfiniteLoop)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidUsageOfForStatementToCreateInfiniteLoop, "Avoid usage of for statement to create an infinite loop.", !IsEnabled(DiagnosticIdentifiers.AvoidUsageOfForStatementToCreateInfiniteLoop)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidUsageOfWhileStatementToCreateInfiniteLoop, "Avoid usage of while statement to create an inifinite loop.", !IsEnabled(DiagnosticIdentifiers.AvoidUsageOfWhileStatementToCreateInfiniteLoop)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyFinallyClause, "Remove empty finally clause.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyFinallyClause)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveArgumentListFromObjectCreation, "Remove argument list from object creation expression.", !IsEnabled(DiagnosticIdentifiers.RemoveArgumentListFromObjectCreation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyLogicalNegation, "Simplify logical negation.", !IsEnabled(DiagnosticIdentifiers.SimplifyLogicalNegation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveUnnecessaryCaseLabel, "Remove unnecessary case label.", !IsEnabled(DiagnosticIdentifiers.RemoveUnnecessaryCaseLabel)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantDefaultSwitchSection, "Remove redundant default switch section.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantDefaultSwitchSection)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantBaseConstructorCall, "Remove redundant base constructor call.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantBaseConstructorCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyNamespaceDeclaration, "Remove empty namespace declaration.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyNamespaceDeclaration)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReplaceIfStatementWithReturnStatement, "Replace if statement with return statement.", !IsEnabled(DiagnosticIdentifiers.ReplaceIfStatementWithReturnStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantConstructor, "Remove redundant constructor.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantConstructor)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidEmptyCatchClauseThatCatchesSystemException, "Avoid empty catch clause that catches System.Exception.", !IsEnabled(DiagnosticIdentifiers.AvoidEmptyCatchClauseThatCatchesSystemException)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatDeclarationBraces, "Format declaration braces.", !IsEnabled(DiagnosticIdentifiers.FormatDeclarationBraces)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OptimizeLinqMethodCall, "Optimize LINQ method call.", !IsEnabled(DiagnosticIdentifiers.OptimizeLinqMethodCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, "Use \"\" instead of string.Empty.", !IsEnabled(DiagnosticIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ThrowingOfNewNotImplementedException, "Throwing of new NotImplementedException.", !IsEnabled(DiagnosticIdentifiers.ThrowingOfNewNotImplementedException)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCountOrLengthPropertyInsteadOfAnyMethod, "Use 'Count/Length' property instead of 'Any' method.", !IsEnabled(DiagnosticIdentifiers.UseCountOrLengthPropertyInsteadOfAnyMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SplitVariableDeclaration, "Split variable declaration.", !IsEnabled(DiagnosticIdentifiers.SplitVariableDeclaration)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfConditionalExpression, "Use coalesce expression instead of conditional expression.", !IsEnabled(DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfConditionalExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseAutoProperty, "Use auto-implemented property.", !IsEnabled(DiagnosticIdentifiers.UseAutoProperty)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseLinefeedAsNewLine, "Use linefeed as newline.", !IsEnabled(DiagnosticIdentifiers.UseLinefeedAsNewLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, "Use carriage return + linefeed as newline.", !IsEnabled(DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseSpacesInsteadOfTab, "Use space(s) instead of tab.", !IsEnabled(DiagnosticIdentifiers.UseSpacesInsteadOfTab)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UsePostfixUnaryOperatorInsteadOfAssignment, "Use --/++ operator instead of assignment.", !IsEnabled(DiagnosticIdentifiers.UsePostfixUnaryOperatorInsteadOfAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallConfigureAwait, "Call 'ConfigureAwait(false)'.", !IsEnabled(DiagnosticIdentifiers.CallConfigureAwait)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyRegion, "Remove empty region.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyRegion)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddEmptyLineBeforeWhileInDoStatement, "Add empty line before 'while' keyword in 'do' statement.", !IsEnabled(DiagnosticIdentifiers.AddEmptyLineBeforeWhileInDoStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveFileWithNoCode, "Remove file with no code.", !IsEnabled(DiagnosticIdentifiers.RemoveFileWithNoCode)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareUsingDirectiveOnTopLevel, "Declare using directive on top level.", !IsEnabled(DiagnosticIdentifiers.DeclareUsingDirectiveOnTopLevel)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, "Use bitwise operation instead of calling 'HasFlag'.", !IsEnabled(DiagnosticIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantToStringCall, "Remove redundant 'ToString' call.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantToStringCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidNullLiteralExpressionOnLeftSideOfBinaryExpression, "Avoid 'null' on the left side of a binary expression.", !IsEnabled(DiagnosticIdentifiers.AvoidNullLiteralExpressionOnLeftSideOfBinaryExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DefaultLabelShouldBeLastLabelInSwitchSection, "Default label should be the last label in a switch section.", !IsEnabled(DiagnosticIdentifiers.DefaultLabelShouldBeLastLabelInSwitchSection)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatDocumentationSummaryOnSingleLine, "Format documentation summary on a single line.", !IsEnabled(DiagnosticIdentifiers.FormatDocumentationSummaryOnSingleLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatDocumentationSummaryOnMultipleLines, "Format documentation summary on multiple lines.", !IsEnabled(DiagnosticIdentifiers.FormatDocumentationSummaryOnMultipleLines)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MakeClassStatic, "Make class static.", !IsEnabled(DiagnosticIdentifiers.MakeClassStatic)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReplaceIfStatementWithAssignment, "Replace if statement with assignment.", !IsEnabled(DiagnosticIdentifiers.ReplaceIfStatementWithAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyConditionalExpression, "Simplify conditional expression.", !IsEnabled(DiagnosticIdentifiers.SimplifyConditionalExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnnecessaryInterpolation, "Unncessary interpolation.", !IsEnabled(DiagnosticIdentifiers.UnnecessaryInterpolation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveEmptyDestructor, "Remove empty destructor.", !IsEnabled(DiagnosticIdentifiers.RemoveEmptyDestructor)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantStringToCharArrayCall, "Remove redundant 'ToCharArray' call.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantStringToCharArrayCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddStaticModifierToAllPartialClassDeclarations, "Add 'static' modifier to all partial class declarations.", !IsEnabled(DiagnosticIdentifiers.AddStaticModifierToAllPartialClassDeclarations)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareTypeInsideNamespace, "Declare type inside namespace.", !IsEnabled(DiagnosticIdentifiers.DeclareTypeInsideNamespace)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddBracesToSwitchSectionWithMultipleStatements, "Add braces to switch section with multiple statements.", !IsEnabled(DiagnosticIdentifiers.AddBracesToSwitchSectionWithMultipleStatements)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CombineEnumerableWhereMethodChain, "Combine 'Enumerable.Where' method chain.", !IsEnabled(DiagnosticIdentifiers.CombineEnumerableWhereMethodChain)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseStringIsNullOrEmptyMethod, "Use 'string.IsNullOrEmpty' method.", !IsEnabled(DiagnosticIdentifiers.UseStringIsNullOrEmptyMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantDelegateCreation, "Remove redundant delegate creation.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantDelegateCreation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MarkLocalVariableAsConst, "Mark local variable as const.", !IsEnabled(DiagnosticIdentifiers.MarkLocalVariableAsConst)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddParenthesesAccordingToOperatorPrecedence, "Add parentheses according to operator precedence.", !IsEnabled(DiagnosticIdentifiers.AddParenthesesAccordingToOperatorPrecedence)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.InlineLocalVariable, "Inline local variable.", !IsEnabled(DiagnosticIdentifiers.InlineLocalVariable)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddBracesToIfElse, "Add braces to if-else.", !IsEnabled(DiagnosticIdentifiers.AddBracesToIfElse)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MergeLocalDeclarationWithAssignment, "Merge local declaration with assignment.", !IsEnabled(DiagnosticIdentifiers.MergeLocalDeclarationWithAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCoalesceExpression, "Use coalesce expression.", !IsEnabled(DiagnosticIdentifiers.UseCoalesceExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantFieldInitialization, "Remove redundant field initalization.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantFieldInitialization)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.BitwiseOperationOnEnumWithoutFlagsAttribute, "Bitwise operation on enum without Flags attribute.", !IsEnabled(DiagnosticIdentifiers.BitwiseOperationOnEnumWithoutFlagsAttribute)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantOverridingMember, "Remove redundant overriding member.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantOverridingMember)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantDisposeOrCloseCall, "Remove redundant Dispose/Close call.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantDisposeOrCloseCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantStatement, "Remove redundant statement.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantStatement)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareEnumMemberWithZeroValue, "Declare enum member with zero value (when enum has FlagsAttribute).", !IsEnabled(DiagnosticIdentifiers.DeclareEnumMemberWithZeroValue)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MergeSwitchSectionsWithEquivalentContent, "Merge switch sections with equivalent content.", !IsEnabled(DiagnosticIdentifiers.MergeSwitchSectionsWithEquivalentContent)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddSummaryToDocumentationComment, "Add summary to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddSummaryToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddSummaryElementToDocumentationComment, "Add summary element to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddSummaryElementToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddExceptionToDocumentationComment, "Add exception to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddExceptionToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddParamElementToDocumentationComment, "Add 'param' element to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddParamElementToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddTypeParamElementToDocumentationComment, "Add 'typeparam' element to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddTypeParamElementToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyCoalesceExpression, "Simplify coalesce expression.", !IsEnabled(DiagnosticIdentifiers.SimplifyCoalesceExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantAsOperator, "Remove redundant 'as' operator.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantAsOperator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseConditionalAccess, "Use conditional access.", !IsEnabled(DiagnosticIdentifiers.UseConditionalAccess)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallStringConcatInsteadOfStringJoin, "Call string.Concat instead of string.Join.", !IsEnabled(DiagnosticIdentifiers.CallStringConcatInsteadOfStringJoin)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantCast, "Remove redundant cast.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantCast)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddEmptyLineAfterClosingBrace, "Add empty line after closing brace.", !IsEnabled(DiagnosticIdentifiers.AddEmptyLineAfterClosingBrace)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SortEnumMembers, "Sort enum members.", !IsEnabled(DiagnosticIdentifiers.SortEnumMembers)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseStringComparison, "Use StringComparison when comparing strings.", !IsEnabled(DiagnosticIdentifiers.UseStringComparison)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseStringLengthInsteadOfComparisonWithEmptyString, "Use string.Length instead of comparison with empty string.", !IsEnabled(DiagnosticIdentifiers.UseStringLengthInsteadOfComparisonWithEmptyString)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CompositeEnumValueContainsUndefinedFlag, "Composite enum value contains undefined flag.", !IsEnabled(DiagnosticIdentifiers.CompositeEnumValueContainsUndefinedFlag)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.StaticMemberInGenericTypeShouldUseTypeParameter, "Static member in generic type should use a type parameter.", !IsEnabled(DiagnosticIdentifiers.StaticMemberInGenericTypeShouldUseTypeParameter)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseGenericEventHandler, "Use EventHandler<T>.", !IsEnabled(DiagnosticIdentifiers.UseGenericEventHandler)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AbstractTypeShouldNotHavePublicConstructors, "Abstract type should not have public constructors.", !IsEnabled(DiagnosticIdentifiers.AbstractTypeShouldNotHavePublicConstructors)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.EnumShouldDeclareExplicitValues, "Enum should declare explicit values.", !IsEnabled(DiagnosticIdentifiers.EnumShouldDeclareExplicitValues)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidChainOfAssignments, "Avoid chain of assignments.", !IsEnabled(DiagnosticIdentifiers.AvoidChainOfAssignments)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnusedParameter, "Unused parameter.", !IsEnabled(DiagnosticIdentifiers.UnusedParameter)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnusedTypeParameter, "Unused type parameter.", !IsEnabled(DiagnosticIdentifiers.UnusedTypeParameter)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnconstrainedTypeParameterCheckedForNull, "Unconstrained type parameter checked for null.", !IsEnabled(DiagnosticIdentifiers.UnconstrainedTypeParameterCheckedForNull)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ValueTypeObjectIsNeverEqualToNull, "Value type object is never equal to null.", !IsEnabled(DiagnosticIdentifiers.ValueTypeObjectIsNeverEqualToNull)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ParameterNameDiffersFromBase, "Parameter name differs from base name.", !IsEnabled(DiagnosticIdentifiers.ParameterNameDiffersFromBase)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MarkFieldAsReadOnly, "Mark field as read-only.", !IsEnabled(DiagnosticIdentifiers.MarkFieldAsReadOnly)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseReadOnlyAutoProperty, "Use read-only auto-implemented property.", !IsEnabled(DiagnosticIdentifiers.UseReadOnlyAutoProperty)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyLazyInitialization, "Simplify lazy initialization.", !IsEnabled(DiagnosticIdentifiers.SimplifyLazyInitialization)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseIsOperatorInsteadOfAsOperator, "Use 'is' operator instead of 'as' operator.", !IsEnabled(DiagnosticIdentifiers.UseIsOperatorInsteadOfAsOperator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfIf, "Use coalesce expression instead of if.", !IsEnabled(DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfIf)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantAsyncAwait, "Remove redundant async/await.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantAsyncAwait)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnusedThisParameter, "Unused this parameter.", !IsEnabled(DiagnosticIdentifiers.UnusedThisParameter)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsNotObvious, "Use 'var' instead of explicit type (when the type is not obvious).", !IsEnabled(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsNotObvious)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeInForEach, "Use 'var' instead of explicit type (in foreach).", !IsEnabled(DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeInForEach)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallDebugFailInsteadOfDebugAssert, "Call Debug.Fail instead of Debug.Assert.", !IsEnabled(DiagnosticIdentifiers.CallDebugFailInsteadOfDebugAssert)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseReturnInsteadOfAssignment, "Use return instead of assignment.", !IsEnabled(DiagnosticIdentifiers.UseReturnInsteadOfAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.InlineLazyInitialization, "Inline lazy initialization.", !IsEnabled(DiagnosticIdentifiers.InlineLazyInitialization)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReplaceCommentWithDocumentationComment, "Replace comment with documentation comment.", !IsEnabled(DiagnosticIdentifiers.ReplaceCommentWithDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantBaseInterface, "Remove redundant base interface.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantBaseInterface)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatInitializerWithSingleExpressionOnSingleLine, "Format initializer with single expression on single line.", !IsEnabled(DiagnosticIdentifiers.FormatInitializerWithSingleExpressionOnSingleLine)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatConditionalExpression, "Format conditional expression (format ? and : on next line).", !IsEnabled(DiagnosticIdentifiers.FormatConditionalExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.FormatSingleLineBlock, "Format single-line block.", !IsEnabled(DiagnosticIdentifiers.FormatSingleLineBlock)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseRegexInstanceInsteadOfStaticMethod, "Use Regex instance instead of static method.", !IsEnabled(DiagnosticIdentifiers.UseRegexInstanceInsteadOfStaticMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseConstantInsteadOfField, "Use constant instead of field.", !IsEnabled(DiagnosticIdentifiers.UseConstantInsteadOfField)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantAutoPropertyInitialization, "Remove redundant auto-property initialization.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantAutoPropertyInitialization)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddOrRemoveRegionName, "Add or remove region name.", !IsEnabled(DiagnosticIdentifiers.AddOrRemoveRegionName)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.JoinStringExpressions, "Join string expressions.", !IsEnabled(DiagnosticIdentifiers.JoinStringExpressions)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DeclareEnumValueAsCombinationOfNames, "Declare enum value as combination of names.", !IsEnabled(DiagnosticIdentifiers.DeclareEnumValueAsCombinationOfNames)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseRegularStringLiteralInsteadOfVerbatimStringLiteral, "Use regular string literal instead of verbatim string literal.", !IsEnabled(DiagnosticIdentifiers.UseRegularStringLiteralInsteadOfVerbatimStringLiteral)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OverridingMemberCannotChangeParamsModifier, "Overriding member cannot change 'params' modifier.", !IsEnabled(DiagnosticIdentifiers.OverridingMemberCannotChangeParamsModifier)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ImplementExceptionConstructors, "Implement exception constructors.", !IsEnabled(DiagnosticIdentifiers.ImplementExceptionConstructors)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseExclusiveOrOperator, "Use ^ operator.", !IsEnabled(DiagnosticIdentifiers.UseExclusiveOrOperator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallExtensionMethodAsInstanceMethod, "Call extension method as instance method.", !IsEnabled(DiagnosticIdentifiers.CallExtensionMethodAsInstanceMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OptimizeStringBuilderAppendCall, "Optimize StringBuilder.Append/AppendLine call.", !IsEnabled(DiagnosticIdentifiers.OptimizeStringBuilderAppendCall)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidBoxingOfValueType, "Avoid unnecessary boxing of value type.", !IsEnabled(DiagnosticIdentifiers.AvoidBoxingOfValueType)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyBooleanExpression, "Simplify boolean expression.", !IsEnabled(DiagnosticIdentifiers.SimplifyBooleanExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallThenByInsteadOfOrderBy, "Call 'Enumerable.ThenBy' instead of 'Enumerable.OrderBy'.", !IsEnabled(DiagnosticIdentifiers.CallThenByInsteadOfOrderBy)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseMethodChaining, "Use method chaining.", !IsEnabled(DiagnosticIdentifiers.UseMethodChaining)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AvoidNullReferenceException, "Avoid NullReferenceException.", !IsEnabled(DiagnosticIdentifiers.AvoidNullReferenceException)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseAttributeUsageAttribute, "Use AttributeUsageAttribute.", !IsEnabled(DiagnosticIdentifiers.UseAttributeUsageAttribute)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseEventArgsEmpty, "Use EventArgs.Empty.", !IsEnabled(DiagnosticIdentifiers.UseEventArgsEmpty)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OrderNamedArguments, "Order named arguments according to the order of parameters.", !IsEnabled(DiagnosticIdentifiers.OrderNamedArguments)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseConditionalAccessInsteadOfConditionalExpression, "Use conditional access instead of conditional expression.", !IsEnabled(DiagnosticIdentifiers.UseConditionalAccessInsteadOfConditionalExpression)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseMethodGroupInsteadOfAnonymousFunction, "Use method group instead of anonymous function.", !IsEnabled(DiagnosticIdentifiers.UseMethodGroupInsteadOfAnonymousFunction)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReduceIfNesting, "Reduce if nesting.", !IsEnabled(DiagnosticIdentifiers.ReduceIfNesting)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OrderTypeParameterConstraints, "Order type parameter constraints.", !IsEnabled(DiagnosticIdentifiers.OrderTypeParameterConstraints)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReturnTaskInsteadOfNull, "Return Task.FromResult instead of returning null.", !IsEnabled(DiagnosticIdentifiers.ReturnTaskInsteadOfNull)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveUnnecessaryElseClause, "Remove unnecessary else clause.", !IsEnabled(DiagnosticIdentifiers.RemoveUnnecessaryElseClause)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveRedundantAssignment, "Remove redundant assignment.", !IsEnabled(DiagnosticIdentifiers.RemoveRedundantAssignment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.RemoveUnusedMemberDeclaration, "Remove unused member declaration.", !IsEnabled(DiagnosticIdentifiers.RemoveUnusedMemberDeclaration)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnnecessaryInterpolatedString, "Unnecessary interpolated string.", !IsEnabled(DiagnosticIdentifiers.UnnecessaryInterpolatedString)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ExpressionIsAlwaysEqualToTrueOrFalse, "Expression is always equal to true/false.", !IsEnabled(DiagnosticIdentifiers.ExpressionIsAlwaysEqualToTrueOrFalse)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnnecessaryUnsafeContext, "Unnecessary unsafe context.", !IsEnabled(DiagnosticIdentifiers.UnnecessaryUnsafeContext)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ReplaceInterpolatedStringWithConcatenation, "Replace interpolated string with concatenation.", !IsEnabled(DiagnosticIdentifiers.ReplaceInterpolatedStringWithConcatenation)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.SimplifyCodeBranching, "Simplify code branching.", !IsEnabled(DiagnosticIdentifiers.SimplifyCodeBranching)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.CallSkipAndAnyInsteadOfCount, "Call 'Enumerable.Skip' and 'Enumerable.Any' instead of 'Enumerable.Count'.", !IsEnabled(DiagnosticIdentifiers.CallSkipAndAnyInsteadOfCount)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UsePatternMatchingInsteadOfIsAndCast, "Use pattern matching instead of combination of 'is' operator and cast operator.", !IsEnabled(DiagnosticIdentifiers.UsePatternMatchingInsteadOfIsAndCast)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UsePatternMatchingInsteadOfAsAndNullCheck, "Use pattern matching instead of combination of 'as' operator and null check.", !IsEnabled(DiagnosticIdentifiers.UsePatternMatchingInsteadOfAsAndNullCheck)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MergePreprocessorDirectives, "Merge preprocessor directives.", !IsEnabled(DiagnosticIdentifiers.MergePreprocessorDirectives)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MarkTypeWithDebuggerDisplayAttribute, "Mark publicly visible type with DebuggerDisplay attribute.", !IsEnabled(DiagnosticIdentifiers.MarkTypeWithDebuggerDisplayAttribute)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MakeMethodExtensionMethod, "Make method an extension method.", !IsEnabled(DiagnosticIdentifiers.MakeMethodExtensionMethod)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MakeClassSealed, "Make class sealed.", !IsEnabled(DiagnosticIdentifiers.MakeClassSealed)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.AddParagraphToDocumentationComment, "Add paragraph to documentation comment.", !IsEnabled(DiagnosticIdentifiers.AddParagraphToDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.ValidateArgumentsCorrectly, "Validate arguments correctly.", !IsEnabled(DiagnosticIdentifiers.ValidateArgumentsCorrectly)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnusedElementInDocumentationComment, "Unused element in documentation comment.", !IsEnabled(DiagnosticIdentifiers.UnusedElementInDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseAsyncAwait, "Use async/await when necessary.", !IsEnabled(DiagnosticIdentifiers.UseAsyncAwait)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UnnecessaryUsageOfEnumerator, "Unnecessary usage of enumerator.", !IsEnabled(DiagnosticIdentifiers.UnnecessaryUsageOfEnumerator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.MakeParameterRefReadOnly, "Make parameter ref read-only.", !IsEnabled(DiagnosticIdentifiers.MakeParameterRefReadOnly)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.OrderElementsInDocumentationComment, "Order elements in documentation comment.", !IsEnabled(DiagnosticIdentifiers.OrderElementsInDocumentationComment)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.UseShortCircuitingOperator, "Use short-circuiting operator.", !IsEnabled(DiagnosticIdentifiers.UseShortCircuitingOperator)));
            analyzers.Add(new BaseModel(DiagnosticIdentifiers.DuplicateEnumValue, "Duplicate enum value.", !IsEnabled(DiagnosticIdentifiers.DuplicateEnumValue)));
        }
    }
}