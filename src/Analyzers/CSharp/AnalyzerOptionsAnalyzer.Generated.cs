// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Roslynator.CSharp
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    internal sealed class AnalyzerOptionsAnalyzer : DiagnosticAnalyzer
    {
        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics
        {
            get
            {
                return ImmutableArray.Create(AnalyzerOptionDiagnosticRules.UseImplicitlyTypedArrayWhenTypeIsObvious, AnalyzerOptionDiagnosticRules.UseImplicitlyTypedArray, AnalyzerOptionDiagnosticRules.ConvertExpressionBodyToBlockBodyWhenExpressionIsMultiLine, AnalyzerOptionDiagnosticRules.ConvertExpressionBodyToBlockBodyWhenDeclarationIsMultiLine, AnalyzerOptionDiagnosticRules.ConvertExpressionBodyToBlockBody, AnalyzerOptionDiagnosticRules.RemoveAccessibilityModifiers, AnalyzerOptionDiagnosticRules.RemoveEmptyLineBetweenClosingBraceAndSwitchSection, AnalyzerOptionDiagnosticRules.DoNotRenamePrivateStaticReadOnlyFieldToCamelCaseWithUnderscore, AnalyzerOptionDiagnosticRules.RemoveArgumentListFromObjectCreation, AnalyzerOptionDiagnosticRules.RemoveParenthesesFromConditionOfConditionalExpressionWhenExpressionIsSingleToken, AnalyzerOptionDiagnosticRules.UseStringEmptyInsteadOfEmptyStringLiteral, AnalyzerOptionDiagnosticRules.RemoveCallToConfigureAwait, AnalyzerOptionDiagnosticRules.ConvertBitwiseOperationToHasFlagCall, AnalyzerOptionDiagnosticRules.SimplifyConditionalExpressionWhenItIncludesNegationOfCondition, AnalyzerOptionDiagnosticRules.ConvertMethodGroupToAnonymousFunction, AnalyzerOptionDiagnosticRules.DoNotUseElementAccessWhenExpressionIsInvocation, AnalyzerOptionDiagnosticRules.UseLogicalNegationAndPatternMatchingToCheckForNull, AnalyzerOptionDiagnosticRules.UseComparisonInsteadPatternMatchingToCheckForNull);
            }
        }

        public override void Initialize(AnalysisContext context)
        {
        }
    }
}