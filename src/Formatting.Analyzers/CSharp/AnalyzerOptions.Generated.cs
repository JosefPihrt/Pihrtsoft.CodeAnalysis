// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

namespace Roslynator.Formatting.CSharp
{
    public static partial class AnalyzerOptions
    {
        internal static readonly AnalyzerOptionDescriptor MaxLineLength = new AnalyzerOptionDescriptor(null, DiagnosticRules.LineIsTooLong, "roslynator.max_line_length");
        internal static readonly AnalyzerOptionDescriptor RemoveEmptyLineBetweenSingleLineAccessors = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.RemoveEmptyLineBetweenSingleLineAccessors, DiagnosticRules.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa, "roslynator.RCS0011.invert");
        internal static readonly AnalyzerOptionDescriptor RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace, DiagnosticRules.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa, "roslynator.RCS0015.invert");
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterBinaryOperatorInsteadOfBeforeIt = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.AddNewLineAfterBinaryOperatorInsteadOfBeforeIt, DiagnosticRules.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa, "roslynator.RCS0027.invert");
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterConditionalOperatorInsteadOfBeforeIt = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.AddNewLineAfterConditionalOperatorInsteadOfBeforeIt, DiagnosticRules.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa, "roslynator.RCS0028.invert");
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt, DiagnosticRules.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa, "roslynator.RCS0032.invert");
        internal static readonly AnalyzerOptionDescriptor RemoveNewLineBetweenClosingBraceAndWhileKeyword = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.RemoveNewLineBetweenClosingBraceAndWhileKeyword, DiagnosticRules.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa, "roslynator.RCS0051.invert");
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterEqualsSignInsteadOfBeforeIt = new AnalyzerOptionDescriptor(AnalyzerOptionDiagnosticRules.AddNewLineAfterEqualsSignInsteadOfBeforeIt, DiagnosticRules.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa, "roslynator.RCS0052.invert");
    }
}